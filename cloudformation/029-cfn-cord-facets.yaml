AWSTemplateFormatVersion : '2010-09-09'
Description: "Splash Landing Page for all apps"

Parameters:
  ProjectName:
    Type: String
  ImageUri:
    Type: String
  ServiceName:
    Type: String
  ServiceHostName:
    Type: String
  Route53HostedZoneId:
    Type: String
  S3PrefixListId:
    Type: String
    Description: Vpc access to S3, obtained with "aws  --profile <your-profile> --region us-east-1 ec2 describe-prefix-lists"
  MinServices:
    Type: Number
  MaxServices:
    Type: Number
  DesiredServices:
    Type: Number

Resources:
  logGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${ProjectName}/${AWS::StackName}"
      RetentionInDays: 14

  targetGroupExternalBrowser:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "external-browser-${ServiceName}"
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: "/"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !ImportValue prod-vpc-PrivateVpcId
      Tags:
        - Key: ProjectName
          Value: !Ref ProjectName

  fargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group applied to containers
      VpcId: !ImportValue prod-vpc-PrivateVpcId
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !ImportValue prod-general-infra-Lb-SecurityGroupId
          Description: Allow access from external facing lb
      SecurityGroupEgress:
        - FromPort: 443
          ToPort: 443
          IpProtocol: 'tcp'
          DestinationPrefixListId: !Ref S3PrefixListId
          Description: Allow outbound to S3
        - FromPort: 80
          ToPort: 80
          IpProtocol: 'tcp'
          DestinationPrefixListId: !Ref S3PrefixListId
          Description: Allow outbound to S3
      Tags:
        - Key: ProjectName
          Value: !Ref ProjectName

  listenerRuleExternalBrowser:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref targetGroupExternalBrowser
          Order: 1
          Type: forward
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Ref ServiceHostName
      ListenerArn: !ImportValue prod-general-infra-Lb-HttpsListenerArn
      Priority: 291

  taskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Essential: true
          Image: !Ref ImageUri
          LinuxParameters:
            # https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities
            Capabilities:
              ## Fargate does not allow adding Linux Capabilities. :-(
              # Add:
              #   - "CHOWN"
              #   - "SETGID"
              #   - "SETUID"
              #   - "NET_BIND_SERVICE"
              # Drop:
              #   - "ALL"
              Drop:
                - SETPCAP
                - MKNOD
                - AUDIT_WRITE
                - NET_RAW
                - DAC_OVERRIDE
                - FOWNER
                - FSETID
                - KILL
                - SYS_CHROOT
                - SETFCAP
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref logGroup
              awslogs-stream-prefix: !Ref ServiceName
          MemoryReservation: 512
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: 256
      ExecutionRoleArn: !GetAtt taskExecutionRole.Arn
      Memory: 512
      NetworkMode: "awsvpc"
      RequiresCompatibilities: 
        - FARGATE
      TaskRoleArn: !GetAtt taskRole.Arn
      Tags:
        - Key: ProjectName
          Value: !Ref ProjectName

  fargateService:
    Type: AWS::ECS::Service
    Properties:
      LaunchType: FARGATE
      ServiceName: !Ref ServiceName
      Cluster: !ImportValue prod-general-infra-EcsCluster
      SchedulingStrategy: REPLICA
      DesiredCount: !Ref DesiredServices
      TaskDefinition: !Ref taskDef
      HealthCheckGracePeriodSeconds: 90
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets: 
            - Fn::Select:
              - 0
              - Fn::Split:
                - ','
                - Fn::ImportValue: prod-vpc-PrivateSubnetIds
            - Fn::Select:
              - 5
              - Fn::Split:
                - ','
                - Fn::ImportValue: prod-vpc-PrivateSubnetIds
          SecurityGroups:
            - !Ref fargateSecurityGroup
            - !ImportValue "prod-vpc-Ec2EcsHostDefaultSecurityGroup"
      LoadBalancers:
        - TargetGroupArn: !Ref targetGroupExternalBrowser
          ContainerPort: 80
          ContainerName: !Ref ServiceName
      Tags:
        - Key: ProjectName
          Value: !Ref ProjectName

  taskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /am-taskexecuton-role/
      PermissionsBoundary: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/Security_Boundary_NoIAM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "auth_ecr"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - "secretsmanager:GetSecretValue"
                  - "kms:Decrypt"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Tags:
        - Key: ProjectName
          Value: !Ref ProjectName

  taskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /am-taskexecuton-role/
      PermissionsBoundary: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/Security_Boundary_NoIAM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Tags:
        - Key: ProjectName
          Value: !Ref ProjectName

  autoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /am-taskexecuton-role/
      PermissionsBoundary: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/Security_Boundary_NoIAM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service: "application-autoscaling.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "application-autoscaling:*"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:PutMetricAlarm"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "ecs:DescribeServices"
                  - "ecs:UpdateService"
                Resource: !Ref fargateService
      Tags:
        - Key: ProjectName
          Value: !Ref ProjectName

  autoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxServices
      MinCapacity: !Ref MinServices
      ResourceId: !Join ["/", [service, !ImportValue prod-general-infra-EcsCluster, !GetAtt [fargateService, Name]]]
      RoleARN: !GetAtt autoScalingRole.Arn
      ScalableDimension: "ecs:service:DesiredCount"
      ServiceNamespace: ecs

  autoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!ImportValue prod-general-infra-EcsCluster, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref autoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 3
        # Keep things at or lower than n% CPU utilization
        TargetValue: 75

  dnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !ImportValue prod-general-infra-Lb-DNSName
        EvaluateTargetHealth: true
        HostedZoneId: !ImportValue prod-general-infra-Lb-HostedZoneId
      HostedZoneId: !Ref Route53HostedZoneId
      Name: !Ref ServiceHostName
      Type: A
