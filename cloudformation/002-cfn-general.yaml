AWSTemplateFormatVersion: '2010-09-09'
Description: General services that need to be available to multiple applications

Parameters:
  ProjectName:
    Type: String
    Description: >-
      Choose a name that will be used consistently throughout all resources
      provisioned to support this effort.
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  SslCertificateArn:
    Type: String
    Description: "Wildcard ssl cert"
  Route53HostedZoneId:
    Type: String
  DefaultDomain:
    Type: String
Resources:
  deploymentArtifacts:
    Type: "AWS::S3::Bucket"

  buildDependencies:
    Type: "AWS::S3::Bucket"
  
  crawledDocuments:
    Type: "AWS::S3::Bucket"
  
  jupyterScratch:
    Type: "AWS::S3::Bucket"

  logExports:
    Type: "AWS::S3::Bucket"

  logExportsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref logExports
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: 
              - "s3:GetBucketAcl"
            Resource: 
              - !Sub "arn:aws:s3:::${logExports}"
            Principal:
              Service: "logs.us-east-1.amazonaws.com"
          - Effect: Allow
            Action: 
              - "s3:PutObject"
            Resource: 
              - !Sub "arn:aws:s3:::${logExports}/*"
            Principal:
              Service: "logs.us-east-1.amazonaws.com"
            Condition:
              StringEquals:
                "s3:x-amz-acl": "bucket-owner-full-control"

  userCloudTrailBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: RemoveOlderThan
            Status: Enabled
            ExpirationInDays: '30'

  userCloudTrailBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref userCloudTrailBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetBucketAcl"
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${userCloudTrailBucket}"
            Principal:
              Service:
                - "cloudtrail.amazonaws.com"
          - Effect: Allow
            Action:
              - "s3:PutObject"
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${userCloudTrailBucket}/AWSLogs/${AWS::AccountId}/*"
            Principal:
              Service:
                - "cloudtrail.amazonaws.com"
            Condition:
              StringEquals:
                "s3:x-amz-acl": "bucket-owner-full-control"

  userEnabledCloudTrail:
    DependsOn:
      - userCloudTrailBucketPolicy
    Type: "AWS::CloudTrail::Trail"
    Properties:
      EventSelectors:
        - DataResources:
            - Type: "AWS::S3::Object"
              Values:
                - !Sub "arn:${AWS::Partition}:s3:::"
            - Type: "AWS::Lambda::Function"
              Values:
                - !Sub "arn:${AWS::Partition}:lambda"
          IncludeManagementEvents: true
          ReadWriteType: All
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: true
      S3BucketName: !Ref userCloudTrailBucket
      TrailName: UserTrail

  openieEcr:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: openie

  fusekiEcr:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: apache-jena-fuseki

  tikaCtakesEcr:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: apache-tika-ctakes

  kibanaEcr:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: kibana

  openieFrontendEcr:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: openie-frontend

  rhapsodeEcr:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: rhapsode

  tikaGeoParserEcr:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: apache-tika-geoparser

  AuthSidecarEcr:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: auth-sidecar

  splashpageEcr:
    Type: AWS::ECS::Repository
    Properties:
      RespositoryName: splash-page

  ecsCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: covid19-data-services
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  lb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
      - Key: 'idle_timeout.timeout_seconds'
        Value: 120
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref lbSecurityGroup
        - !ImportValue "prod-vpc-CloudwatchClientSecurityGroup"
      Subnets:
        Fn::Split:
          - ','
          - !ImportValue prod-vpc-PublicSubnetIds
      Tags:
        - Key: ProjectName
          Value: !Ref ProjectName

  internalLb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
      - Key: 'idle_timeout.timeout_seconds'
        Value: 600
      Type: application
      IpAddressType: ipv4
      Scheme: internal
      SecurityGroups:
        - !Ref internalLbSecurityGroup
        - !ImportValue "prod-vpc-CloudwatchClientSecurityGroup"
      Subnets:
        - Fn::Select:
          - 0
          - Fn::Split:
            - ','
            - Fn::ImportValue: prod-vpc-PrivateSubnetIds
        - Fn::Select:
          - 5
          - Fn::Split:
            - ','
            - Fn::ImportValue: prod-vpc-PrivateSubnetIds
      Tags:
        - Key: ProjectName
          Value: !Ref ProjectName

  dnsRecordDefault:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt lb.DNSName
        EvaluateTargetHealth: true
        HostedZoneId: !GetAtt lb.CanonicalHostedZoneID
      HostedZoneId: !Ref Route53HostedZoneId
      Name: !Ref DefaultDomain
      Type: A

  internalLbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group applied to load balancer for internal access
      VpcId: !ImportValue prod-vpc-PrivateVpcId
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          CidrIp: '0.0.0.0/0'
          FromPort: 80
          ToPort: 80
        - IpProtocol: 'tcp'
          CidrIp: '0.0.0.0/0'
          FromPort: 443
          ToPort: 443
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: ProjectName
          Value: !Ref ProjectName

  lbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group applied to load balancer
      VpcId: !ImportValue prod-vpc-PrivateVpcId
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          CidrIp: '0.0.0.0/0'
          FromPort: 80
          ToPort: 80
        - IpProtocol: 'tcp'
          CidrIp: '0.0.0.0/0'
          FromPort: 443
          ToPort: 443
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: ProjectName
          Value: !Ref ProjectName

  httpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref lb
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - RedirectConfig:
            Protocol: HTTPS
            StatusCode: HTTP_301
            Port: 443
          Type: redirect

  httpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: "not the droids you're looking for"
            StatusCode: "200"
      LoadBalancerArn: !Ref lb
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
      Certificates:
        - CertificateArn: !Ref SslCertificateArn

  internalHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: "not the droids you're looking for, internally"
            StatusCode: "200"
      LoadBalancerArn: !Ref internalLb
      Port: 80
      Protocol: HTTP

Outputs:
  LbHostedZoneId:
    Value: !GetAtt lb.CanonicalHostedZoneID
    Export:
      Name:
        !Sub "${AWS::StackName}-Lb-HostedZoneId"
  LbDNSName:
    Value: !GetAtt lb.DNSName
    Export:
      Name:
        !Sub "${AWS::StackName}-Lb-DNSName"
  LbSecurityGroupId:
    Value: !GetAtt lbSecurityGroup.GroupId
    Export:
      Name:
        !Sub "${AWS::StackName}-Lb-SecurityGroupId"
  LbHttpsListener:
    Value: !Ref httpsListener
    Export:
      Name:
        !Sub "${AWS::StackName}-Lb-HttpsListenerArn"
  InternalLbHostedZoneId:
    Value: !GetAtt internalLb.CanonicalHostedZoneID
    Export:
      Name:
        !Sub "${AWS::StackName}-InternalLb-HostedZoneId"
  InternalLbDNSName:
    Value: !GetAtt internalLb.DNSName
    Export:
      Name:
        !Sub "${AWS::StackName}-InternalLb-DNSName"
  InternalLbSecurityGroupId:
    Value: !GetAtt internalLbSecurityGroup.GroupId
    Export:
      Name:
        !Sub "${AWS::StackName}-InternalLb-SecurityGroupId"
  InternalLbHttpListener:
    Value: !Ref internalHttpListener
    Export:
      Name:
        !Sub "${AWS::StackName}-InternalLb-HttpListenerArn"
  EcsCluster:
    Value: !Ref ecsCluster
    Export:
      Name: !Sub "${AWS::StackName}-EcsCluster"
